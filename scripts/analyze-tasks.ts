import { claude } from '@instantlyeasy/claude-code-sdk-ts';

async function analyzeTasks() {
  console.log('üîç Iniciando an√°lisis de tareas...\n');
  
  try {
    // Configurar Claude con permisos necesarios
    const analysis = await claude()
      .allowTools('Bash', 'Read', 'Write', 'mcp__context7__get-library-docs', 'mcp__context7__resolve-library-id')
      .skipPermissions()  // Para automatizaci√≥n sin prompts
      .query(`
        Por favor realiza un an√°lisis completo de las tareas del proyecto:

        1. LISTAR TAREAS
        Ejecuta: npx task-master list
        Identifica todas las subtareas pendientes.

        2. ANALIZAR CADA SUBTAREA
        Para cada subtarea pendiente, eval√∫a:
        - Complejidad estimada (1-10)
        - Tiempo aproximado de implementaci√≥n
        - Tecnolog√≠as/librer√≠as involucradas
        - Posibles riesgos o consideraciones

        3. INVESTIGAR MEJORES PR√ÅCTICAS
        Para las tecnolog√≠as identificadas, investiga:
        - Patrones recomendados actuales
        - Errores comunes a evitar
        - Consideraciones de rendimiento/seguridad

        4. BUSCAR EN CONTEXT7
        Usa Context7 para encontrar:
        - Documentaci√≥n relevante de las librer√≠as
        - Snippets de c√≥digo √∫tiles
        - Ejemplos de implementaci√≥n

        5. GENERAR REPORTE
        Crea un archivo 'task-analysis-report.md' con el siguiente formato:

        # An√°lisis de Tareas - ${new Date().toLocaleDateString()}

        ## Resumen Ejecutivo
        - Total de subtareas analizadas: X
        - Complejidad promedio: X/10
        - Tiempo total estimado: X horas

        ## An√°lisis Detallado

        ### Subtarea X.Y: [T√≠tulo]
        **Complejidad:** X/10
        **Tiempo estimado:** X horas
        **Tecnolog√≠as:** [lista]

        **Hallazgos de investigaci√≥n:**
        - [Mejores pr√°cticas encontradas]
        - [Consideraciones importantes]

        **Recursos de Context7:**
        - [Documentaci√≥n relevante]
        - [Snippets √∫tiles]

        **Sugerencia de actualizaci√≥n para task-master:**
        \`\`\`
        npx task-master update-subtask --id=X.Y --prompt="
        COMPLEJIDAD: X/10, ~X horas
        STACK: [tecnolog√≠as]
        RECURSOS:
        - [recurso 1]
        - [recurso 2]
        CONSIDERACIONES:
        - [consideraci√≥n 1]
        - [consideraci√≥n 2]
        "
        \`\`\`

        ---

        [Repetir para cada subtarea]

        ## Recomendaciones Generales
        [Insights generales del an√°lisis]

        IMPORTANTE: NO ejecutes ning√∫n comando de actualizaci√≥n. Solo genera el reporte con las sugerencias.
      `)
      .asText();
    
    console.log(analysis);
    console.log('\n‚úÖ An√°lisis completado! Revisa el archivo task-analysis-report.md');
    
  } catch (error) {
    console.error('‚ùå Error durante el an√°lisis:', error);
    
    // Manejo espec√≠fico de errores
    if (error.message?.includes('command not found: claude')) {
      console.error('\nüìã Parece que Claude Code CLI no est√° instalado.');
      console.error('Por favor ejecuta:');
      console.error('  npm install -g @anthropic-ai/claude-code');
      console.error('  claude login');
    } else if (error.message?.includes('Invalid API key')) {
      console.error('\nüîë Error de autenticaci√≥n.');
      console.error('Por favor ejecuta: claude login');
    }
  }
}

// Ejecutar el an√°lisis
analyzeTasks();