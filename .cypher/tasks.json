[
  {
    "id": "1",
    "title": "Implementar TaskEngine - Core del Sistema",
    "description": "Crear la capa de acceso a datos minimalista que será la base de todo el sistema, operando directamente sobre este archivo.",
    "status": "done",
    "priority": "high",
    "dependencies": [],
    "subtasks": [
      {
        "id": "1.1",
        "title": "Implementar operaciones de lectura (readTasks, getTaskById)",
        "description": "Implementar las funciones para leer el array completo de tareas y para encontrar una tarea específica por su ID. Incluir manejo de errores básico para archivo no encontrado.",
        "status": "done"
      },
      {
        "id": "1.2",
        "title": "Implementar operaciones de escritura (writeTasks, updateTask)",
        "description": "Implementar las funciones para escribir el array completo de tareas al archivo y para actualizar una tarea existente. La escritura debe ser atómica para prevenir corrupción de datos.",
        "status": "done"
      },
      {
        "id": "1.3",
        "title": "Añadir tests básicos para el TaskEngine",
        "description": "Crear un archivo de test simple para validar que todas las operaciones de lectura y escritura del TaskEngine funcionan como se espera. Usar un archivo tasks.json de prueba.",
        "status": "done"
      }
    ]
  },
  {
    "id": "2",
    "title": "Implementar Comandos Básicos",
    "description": "Crear los comandos fundamentales que usan TaskEngine para operaciones básicas.",
    "status": "done",
    "priority": "high",
    "dependencies": [
      "1"
    ],
    "subtasks": [
      {
        "id": "2.1",
        "title": "Comando 'decode' (list/show)",
        "description": "Mostrar tareas en formato AI-optimizado.",
        "status": "done"
      },
      {
        "id": "2.2",
        "title": "Comando 'transmit' (pre-flight)",
        "description": "Generar contexto optimizado para una tarea usando PREFLIGHT_TEMPLATE.md.",
        "status": "done"
      },
      {
        "id": "2.3",
        "title": "Comando 'update' (universal)",
        "description": "Actualizar cualquier campo de una tarea: status, title, description, dependencies, subtasks.",
        "status": "done"
      },
      {
        "id": "2.4",
        "title": "Comando 'next'",
        "description": "Identificar la siguiente tarea a implementar basada en dependencias y prioridades.",
        "status": "done"
      },
      {
        "id": "2.5",
        "title": "Comando 'validate'",
        "description": "Validar la integridad del grafo de tareas, con opción --fix para corregir dependencias inválidas.",
        "status": "done"
      }
    ]
  },
  {
    "id": "3",
    "title": "Integración con Claude Code SDK",
    "description": "Añadir capacidades de IA usando Claude SDK para flujos complejos.",
    "status": "done",
    "priority": "medium",
    "dependencies": [
      "2"
    ],
    "executionHint": {
      "strategy": "supervisor-executor",
      "parallelizable": true,
      "estimatedFiles": 6
    },
    "subtasks": [
      {
        "id": "3.1",
        "title": "Crear interfaz AIProvider con collaborativeAnalysis",
        "description": "Definir src/providers/ai-provider.interface.ts con métodos generateTasks(), expandTask() y collaborativeAnalysis() para análisis multi-perspectiva.",
        "status": "done"
      },
      {
        "id": "3.2",
        "title": "Implementar ClaudeProvider",
        "description": "Crear src/providers/claude-provider.ts usando @anthropic-ai/claude-code para implementar la interfaz.",
        "status": "done"
      },
      {
        "id": "3.3",
        "title": "Comando 'research' - Investigación multi-perspectiva",
        "description": "Implementar el comando estrella que usa collaborativeAnalysis para investigar temas con múltiples perspectivas AI, generando síntesis automática.",
        "status": "done"
      },
      {
        "id": "3.4",
        "title": "Comando 'setup-project' con IA",
        "description": "Implementar comando que use ClaudeProvider para generar tareas desde un PRD.",
        "status": "done"
      },
      {
        "id": "3.5",
        "title": "Comando 'expand' con IA",
        "description": "Implementar comando que use ClaudeProvider para descomponer tareas complejas y generar descripciones detalladas/estrategias de testing.",
        "status": "done",
        "subtasks": [
          {
            "id": "3.5.1",
            "title": "Create expand command structure",
            "description": "Implement the basic expand command in src/commands/expand.ts following the pattern of existing commands (decode, transmit, update). The command should accept a task ID as argument, validate it exists using TaskEngine, and prepare the task data for AI expansion. Include proper error handling for invalid task IDs.",
            "status": "done"
          },
          {
            "id": "3.5.2",
            "title": "Integrate ClaudeProvider for task expansion",
            "description": "Connect the expand command to ClaudeProvider to decompose complex tasks into subtasks. Use the existing ClaudeProvider instance, create a prompt template that includes the task details and context (parent/sibling tasks), and process the AI response to generate an array of subtask objects with proper IDs (e.g., 1.2.1, 1.2.2 for task 1.2).",
            "status": "done",
            "dependencies": [
              "3.5.1"
            ]
          },
          {
            "id": "3.5.3",
            "title": "Save expanded subtasks and display results",
            "description": "Implement the logic to save the AI-generated subtasks back to tasks.json using TaskEngine, ensuring proper nesting under the parent task. Display the expansion results in a clear, AI-consumable format showing the new subtask hierarchy. Handle edge cases like tasks that already have subtasks (prompt for confirmation to replace).",
            "status": "done",
            "dependencies": [
              "3.5.2"
            ]
          }
        ]
      },
      {
        "id": "3.6",
        "title": "Añadir flag --perspective a comandos existentes",
        "description": "EVALUADO: Tras analizar el valor del flag --perspective en otros comandos, se determinó que no aporta beneficio real más allá del comando research donde ya está implementado. La naturaleza determinista de transmit, validate y expand no se beneficia de perspectivas opcionales.",
        "status": "done"
      },
      {
        "id": "3.7",
        "title": "Externalizar y Versionar Plantillas de Prompts",
        "description": "Refactorizar ClaudeProvider para cargar las plantillas de prompts desde archivos .md externos en un directorio src/providers/prompts/. Esto permitirá el versionado con Git y facilitará la experimentación.",
        "status": "done",
        "priority": "medium"
      }
    ]
  },
  {
    "id": "4",
    "title": "Sistema Multi-Proveedor (Futuro)",
    "description": "Expandir para soportar múltiples proveedores de IA como Gemini.",
    "status": "done",
    "priority": "low",
    "dependencies": [
      "3"
    ],
    "subtasks": [
      {
        "id": "4.1",
        "title": "Implementar GeminiProvider",
        "description": "NO IMPLEMENTADO: Gemini CLI no está disponible actualmente. El foco se mantiene en la optimización y pulido del SDK de Claude Code que ya está funcionando perfectamente.",
        "status": "done"
      },
      {
        "id": "4.2",
        "title": "Sistema de selección de proveedor",
        "description": "NO NECESARIO: Solo tenemos Claude Provider disponible, por lo que no hay necesidad de un sistema de selección. El sistema usa Claude por defecto.",
        "status": "done"
      },
      {
        "id": "4.3",
        "title": "Modo colaborativo experimental",
        "description": "NO APLICABLE: Sin múltiples proveedores disponibles, no es posible implementar comparación de resultados.",
        "status": "done"
      }
    ]
  },
  {
    "id": "5",
    "title": "Implementar Pipeline de IA Heterogéneo (Multi-Modelo)",
    "description": "Refactorizar el AIProvider para orquestar un pipeline de múltiples modelos de IA (ej. Haiku para búsqueda, Sonnet para análisis, Opus para síntesis) con el objetivo de optimizar drásticamente el rendimiento y los costes.",
    "status": "pending",
    "priority": "medium",
    "dependencies": [
      "3"
    ],
    "subtasks": [
      {
        "id": "5.1",
        "title": "Diseñar arquitectura de pipeline multi-modelo",
        "description": "Definir cómo los diferentes modelos (Haiku, Sonnet, Opus) se comunicarán y pasarán contexto entre sí.",
        "status": "pending"
      },
      {
        "id": "5.2",
        "title": "Implementar selección dinámica de modelos",
        "description": "Añadir lógica para seleccionar automáticamente el modelo óptimo basado en la complejidad de la tarea.",
        "status": "pending"
      },
      {
        "id": "5.3",
        "title": "Optimizar collaborativeAnalysis con pipeline heterogéneo",
        "description": "Refactorizar el método para usar Haiku en búsquedas paralelas y Sonnet/Opus para síntesis.",
        "status": "pending"
      },
      {
        "id": "5.4",
        "title": "Añadir métricas de rendimiento y coste",
        "description": "Implementar tracking de tokens usados, tiempo de respuesta y coste estimado por operación.",
        "status": "pending"
      }
    ]
  },
  {
    "id": "6",
    "title": "Implementar Comando 'add-task'",
    "description": "Crear un nuevo comando 'cypher add-task' que permita añadir una nueva tarea de alto nivel al tasks.json desde la CLI. Debe soportar parámetros para id, title, description, y priority.",
    "status": "done",
    "priority": "high",
    "dependencies": [
      "1"
    ],
    "subtasks": [
      {
        "id": "6.1",
        "title": "Diseñar interface CLI para add-task",
        "description": "Definir flags y argumentos: --id, --title, --description, --priority, --deps",
        "status": "pending"
      },
      {
        "id": "6.2",
        "title": "Implementar lógica de validación",
        "description": "Validar que el ID no exista, que las dependencias sean válidas, y que los campos requeridos estén presentes",
        "status": "pending"
      },
      {
        "id": "6.3",
        "title": "Integrar con TaskEngine",
        "description": "Usar TaskEngine.addTask() para persistir la nueva tarea manteniendo la integridad del archivo",
        "status": "pending"
      }
    ]
  },
  {
    "id": "7",
    "title": "Mejorar comando 'expand' para generar subtareas más precisas",
    "description": "Investigar y implementar mejoras al comando expand para que genere subtareas más alineadas con el contexto del proyecto y los patrones existentes. Considerar: mejor contexto del código existente, validación de subtareas generadas, o proceso de refinamiento.",
    "status": "pending",
    "priority": "low",
    "dependencies": [
      "3.5"
    ]
  },
  {
    "id": "8",
    "title": "[POST-MVP] Implementar el Protocolo Génesis para la Creación de Roles",
    "description": "Construir las herramientas y artefactos necesarios para que el Orquestador pueda crear, validar e integrar nuevos especialistas de IA en el ecosistema de forma coherente y alineada con la Constitución.",
    "status": "pending",
    "priority": "medium",
    "dependencies": [
      "1",
      "2"
    ],
    "subtasks": [
      {
        "id": "8.1",
        "title": "Revisar y trabajar sobre la idea de la tarea al completo",
        "description": "Analizar en profundidad la propuesta, la crítica y los artefactos relacionados para refinar el plan de implementación antes de escribir código.",
        "status": "pending"
      },
      {
        "id": "8.2",
        "title": "Crear Artefactos Fundacionales",
        "description": "Escribir y versionar los archivos CONSTITUTION.md y ROLE_GENOME_TEMPLATE.md en docs/cyper_docs/.",
        "status": "pending"
      },
      {
        "id": "8.3",
        "title": "Implementar Comando 'cypher specialize'",
        "description": "Crear el comando que toma una ruta y una descripción, y utiliza al Orquestador para generar el CLAUDE.md del nuevo especialista a partir del genoma.",
        "status": "pending"
      },
      {
        "id": "8.4",
        "title": "Implementar Script de Revisión por Pares",
        "description": "Crear el script que orquesta la Verificación Socrática, potencialmente invocado por un hook post-uso de 'cypher specialize'.",
        "status": "pending"
      },
      {
        "id": "8.5",
        "title": "Implementar Carga de Contexto Jerárquica",
        "description": "Modificar el núcleo del sistema para que los agentes busquen el contexto (CLAUDE.md/GEMINI.md) desde su directorio actual hacia la raíz.",
        "status": "pending"
      }
    ]
  },
  {
    "id": "9",
    "title": "[POST-MVP] Implementar la Observabilidad del Ecosistema",
    "description": "Crear herramientas para visualizar y validar el estado actual del ecosistema de IA, incluyendo los roles existentes y sus relaciones.",
    "status": "pending",
    "priority": "medium",
    "dependencies": [
      "8"
    ],
    "subtasks": [
      {
        "id": "9.1",
        "title": "Revisar y trabajar sobre la idea de la tarea al completo",
        "description": "Analizar la necesidad de observabilidad y diseñar los comandos y salidas para que sean útiles para el arquitecto humano y el Orquestador.",
        "status": "pending"
      },
      {
        "id": "9.2",
        "title": "Implementar Comando 'cypher ecosystem status'",
        "description": "Crear un comando que escanee el proyecto, identifique todos los especialistas existentes por su archivo de contexto local y los liste.",
        "status": "pending"
      },
      {
        "id": "9.3",
        "title": "Implementar Validador de Genoma",
        "description": "Extender el comando 'status' con un flag --validate que compruebe que cada archivo de contexto de especialista se adhiere a la estructura del ROLE_GENOME_TEMPLATE.md.",
        "status": "pending"
      }
    ]
  }
]