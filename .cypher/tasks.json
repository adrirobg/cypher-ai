[
  {
    "id": "1",
    "title": "Implementar TaskEngine - Core del Sistema",
    "description": "Crear la capa de acceso a datos minimalista que será la base de todo el sistema, operando directamente sobre este archivo.",
    "status": "done",
    "priority": "high",
    "dependencies": [],
    "subtasks": [
      {
        "id": "1.1",
        "title": "Implementar operaciones de lectura (readTasks, getTaskById)",
        "description": "Implementar las funciones para leer el array completo de tareas y para encontrar una tarea específica por su ID. Incluir manejo de errores básico para archivo no encontrado.",
        "status": "done"
      },
      {
        "id": "1.2",
        "title": "Implementar operaciones de escritura (writeTasks, updateTask)",
        "description": "Implementar las funciones para escribir el array completo de tareas al archivo y para actualizar una tarea existente. La escritura debe ser atómica para prevenir corrupción de datos.",
        "status": "done"
      },
      {
        "id": "1.3",
        "title": "Añadir tests básicos para el TaskEngine",
        "description": "Crear un archivo de test simple para validar que todas las operaciones de lectura y escritura del TaskEngine funcionan como se espera. Usar un archivo tasks.json de prueba.",
        "status": "done"
      }
    ]
  },
  {
    "id": "2",
    "title": "Implementar Comandos Básicos",
    "description": "Crear los comandos fundamentales que usan TaskEngine para operaciones básicas.",
    "status": "pending",
    "priority": "high",
    "dependencies": ["1"],
    "subtasks": [
      {
        "id": "2.1",
        "title": "Comando 'decode' (list/show)",
        "description": "Mostrar tareas en formato AI-optimizado.",
        "status": "pending"
      },
      {
        "id": "2.2",
        "title": "Comando 'transmit' (pre-flight)",
        "description": "Generar contexto optimizado para una tarea usando PREFLIGHT_TEMPLATE.md.",
        "status": "pending"
      },
      {
        "id": "2.3",
        "title": "Comando 'update' (universal)",
        "description": "Actualizar cualquier campo de una tarea: status, title, description, dependencies, subtasks.",
        "status": "pending"
      },
      {
        "id": "2.4",
        "title": "Comando 'next'",
        "description": "Identificar la siguiente tarea a implementar basada en dependencias y prioridades.",
        "status": "pending"
      },
      {
        "id": "2.5",
        "title": "Comando 'validate'",
        "description": "Validar la integridad del grafo de tareas, con opción --fix para corregir dependencias inválidas.",
        "status": "pending"
      }
    ]
  },
  {
    "id": "3",
    "title": "Integración con Claude Code SDK",
    "description": "Añadir capacidades de IA usando Claude SDK para flujos complejos.",
    "status": "pending",
    "priority": "medium",
    "dependencies": ["2"],
    "subtasks": [
      {
        "id": "3.1",
        "title": "Crear interfaz AIProvider con collaborativeAnalysis",
        "description": "Definir src/providers/ai-provider.interface.ts con métodos generateTasks(), expandTask() y collaborativeAnalysis() para análisis multi-perspectiva.",
        "status": "pending"
      },
      {
        "id": "3.2",
        "title": "Implementar ClaudeProvider",
        "description": "Crear src/providers/claude-provider.ts usando @anthropic-ai/claude-code para implementar la interfaz.",
        "status": "pending"
      },
      {
        "id": "3.3",
        "title": "Comando 'research' - Investigación multi-perspectiva",
        "description": "Implementar el comando estrella que usa collaborativeAnalysis para investigar temas con múltiples perspectivas AI, generando síntesis automática.",
        "status": "pending"
      },
      {
        "id": "3.4",
        "title": "Comando 'setup-project' con IA",
        "description": "Implementar comando que use ClaudeProvider para generar tareas desde un PRD.",
        "status": "pending"
      },
      {
        "id": "3.5",
        "title": "Comando 'expand' con IA",
        "description": "Implementar comando que use ClaudeProvider para descomponer tareas complejas y generar descripciones detalladas/estrategias de testing.",
        "status": "pending"
      },
      {
        "id": "3.6",
        "title": "Añadir flag --perspective a comandos existentes",
        "description": "Extender transmit, validate y otros comandos para soportar diferentes perspectivas de análisis (architecture, security, performance, etc).",
        "status": "pending"
      }
    ]
  },
  {
    "id": "4",
    "title": "Sistema Multi-Proveedor (Futuro)",
    "description": "Expandir para soportar múltiples proveedores de IA como Gemini.",
    "status": "pending",
    "priority": "low",
    "dependencies": ["3"],
    "subtasks": [
      {
        "id": "4.1",
        "title": "Implementar GeminiProvider",
        "description": "Crear src/providers/gemini-provider.ts cuando Gemini CLI esté disponible.",
        "status": "pending"
      },
      {
        "id": "4.2",
        "title": "Sistema de selección de proveedor",
        "description": "Permitir al usuario elegir qué IA usar via flag --provider=claude|gemini.",
        "status": "pending"
      },
      {
        "id": "4.3",
        "title": "Modo colaborativo experimental",
        "description": "Explorar usar múltiples proveedores de IA simultáneamente para comparar resultados.",
        "status": "pending"
      }
    ]
  }
]